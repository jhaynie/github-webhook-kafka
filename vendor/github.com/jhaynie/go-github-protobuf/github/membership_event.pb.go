// Code generated by protoc-gen-go.
// source: membership_event.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MembershipEvent struct {
	Action       string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Scope        string `protobuf:"bytes,2,opt,name=scope" json:"scope,omitempty"`
	Member       *User  `protobuf:"bytes,3,opt,name=member" json:"member,omitempty"`
	Sender       *User  `protobuf:"bytes,4,opt,name=sender" json:"sender,omitempty"`
	Team         *Team  `protobuf:"bytes,5,opt,name=team" json:"team,omitempty"`
	Organization *User  `protobuf:"bytes,6,opt,name=organization" json:"organization,omitempty"`
}

func (m *MembershipEvent) Reset()                    { *m = MembershipEvent{} }
func (m *MembershipEvent) String() string            { return proto.CompactTextString(m) }
func (*MembershipEvent) ProtoMessage()               {}
func (*MembershipEvent) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0} }

func (m *MembershipEvent) GetMember() *User {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *MembershipEvent) GetSender() *User {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MembershipEvent) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *MembershipEvent) GetOrganization() *User {
	if m != nil {
		return m.Organization
	}
	return nil
}

func init() {
	proto.RegisterType((*MembershipEvent)(nil), "github.MembershipEvent")
}

func init() { proto.RegisterFile("membership_event.proto", fileDescriptor18) }

var fileDescriptor18 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0x4d, 0xcd, 0x4d,
	0x4a, 0x2d, 0x2a, 0xce, 0xc8, 0x2c, 0x88, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0x92, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0x82, 0x88, 0x49, 0x71, 0x95, 0xa4, 0x26, 0xe6, 0x42, 0xd8, 0x4a, 0xf7, 0x19, 0xb9, 0xf8, 0x7d,
	0xe1, 0x5a, 0x5d, 0x41, 0x3a, 0x85, 0xc4, 0xb8, 0xd8, 0x12, 0x93, 0x4b, 0x32, 0xf3, 0xf3, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x21, 0x11, 0x2e, 0xd6, 0xe2, 0xe4, 0xfc, 0x82,
	0x54, 0x09, 0x26, 0xb0, 0x30, 0x84, 0x23, 0xa4, 0xc2, 0xc5, 0x06, 0xb1, 0x5b, 0x82, 0x19, 0x28,
	0xcc, 0x6d, 0xc4, 0xa3, 0x07, 0xb1, 0x52, 0x2f, 0x14, 0x68, 0x63, 0x10, 0x54, 0x0e, 0xa4, 0xaa,
	0x38, 0x35, 0x2f, 0x05, 0xa8, 0x8a, 0x05, 0x9b, 0x2a, 0x88, 0x9c, 0x90, 0x02, 0x17, 0x0b, 0xc8,
	0x6d, 0x12, 0xac, 0xa8, 0x6a, 0x42, 0x80, 0x62, 0x41, 0x60, 0x19, 0x21, 0x03, 0x2e, 0x9e, 0xfc,
	0xa2, 0xf4, 0xc4, 0xbc, 0xcc, 0xaa, 0x44, 0xb0, 0x0b, 0xd9, 0xb0, 0x98, 0x86, 0xa2, 0x22, 0x89,
	0x0d, 0xec, 0x51, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x09, 0x4a, 0x49, 0x22, 0x01,
	0x00, 0x00,
}
