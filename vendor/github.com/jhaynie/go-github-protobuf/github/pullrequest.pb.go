// Code generated by protoc-gen-go.
// source: pullrequest.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RepositoryRef struct {
	Label string      `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Ref   string      `protobuf:"bytes,2,opt,name=ref" json:"ref,omitempty"`
	Sha   string      `protobuf:"bytes,3,opt,name=sha" json:"sha,omitempty"`
	User  *User       `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Repo  *Repository `protobuf:"bytes,5,opt,name=repo" json:"repo,omitempty"`
}

func (m *RepositoryRef) Reset()                    { *m = RepositoryRef{} }
func (m *RepositoryRef) String() string            { return proto.CompactTextString(m) }
func (*RepositoryRef) ProtoMessage()               {}
func (*RepositoryRef) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{0} }

func (m *RepositoryRef) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RepositoryRef) GetRepo() *Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

type LinkHref struct {
	Href string `protobuf:"bytes,1,opt,name=href" json:"href,omitempty"`
}

func (m *LinkHref) Reset()                    { *m = LinkHref{} }
func (m *LinkHref) String() string            { return proto.CompactTextString(m) }
func (*LinkHref) ProtoMessage()               {}
func (*LinkHref) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{1} }

type Links struct {
	Self           *LinkHref `protobuf:"bytes,1,opt,name=self" json:"self,omitempty"`
	Html           *LinkHref `protobuf:"bytes,2,opt,name=html" json:"html,omitempty"`
	Issue          *LinkHref `protobuf:"bytes,3,opt,name=issue" json:"issue,omitempty"`
	Comments       *LinkHref `protobuf:"bytes,4,opt,name=comments" json:"comments,omitempty"`
	ReviewComments *LinkHref `protobuf:"bytes,5,opt,name=review_comments,json=reviewComments" json:"review_comments,omitempty"`
	ReviewComment  *LinkHref `protobuf:"bytes,6,opt,name=review_comment,json=reviewComment" json:"review_comment,omitempty"`
	Commits        *LinkHref `protobuf:"bytes,7,opt,name=commits" json:"commits,omitempty"`
	Statuses       *LinkHref `protobuf:"bytes,8,opt,name=statuses" json:"statuses,omitempty"`
}

func (m *Links) Reset()                    { *m = Links{} }
func (m *Links) String() string            { return proto.CompactTextString(m) }
func (*Links) ProtoMessage()               {}
func (*Links) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{2} }

func (m *Links) GetSelf() *LinkHref {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *Links) GetHtml() *LinkHref {
	if m != nil {
		return m.Html
	}
	return nil
}

func (m *Links) GetIssue() *LinkHref {
	if m != nil {
		return m.Issue
	}
	return nil
}

func (m *Links) GetComments() *LinkHref {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Links) GetReviewComments() *LinkHref {
	if m != nil {
		return m.ReviewComments
	}
	return nil
}

func (m *Links) GetReviewComment() *LinkHref {
	if m != nil {
		return m.ReviewComment
	}
	return nil
}

func (m *Links) GetCommits() *LinkHref {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *Links) GetStatuses() *LinkHref {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type PullRequest struct {
	Id                int32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Url               string         `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	HtmlUrl           string         `protobuf:"bytes,3,opt,name=html_url,json=htmlUrl" json:"html_url,omitempty"`
	DiffUrl           string         `protobuf:"bytes,4,opt,name=diff_url,json=diffUrl" json:"diff_url,omitempty"`
	PatchUrl          string         `protobuf:"bytes,5,opt,name=patch_url,json=patchUrl" json:"patch_url,omitempty"`
	IssueUrl          string         `protobuf:"bytes,6,opt,name=issue_url,json=issueUrl" json:"issue_url,omitempty"`
	CommitsUrl        string         `protobuf:"bytes,7,opt,name=commits_url,json=commitsUrl" json:"commits_url,omitempty"`
	ReviewCommentsUrl string         `protobuf:"bytes,8,opt,name=review_comments_url,json=reviewCommentsUrl" json:"review_comments_url,omitempty"`
	ReviewCommentUrl  string         `protobuf:"bytes,9,opt,name=review_comment_url,json=reviewCommentUrl" json:"review_comment_url,omitempty"`
	CommentsUrl       string         `protobuf:"bytes,10,opt,name=comments_url,json=commentsUrl" json:"comments_url,omitempty"`
	StatusesUrl       string         `protobuf:"bytes,11,opt,name=statuses_url,json=statusesUrl" json:"statuses_url,omitempty"`
	Number            int32          `protobuf:"varint,12,opt,name=number" json:"number,omitempty"`
	State             string         `protobuf:"bytes,13,opt,name=state" json:"state,omitempty"`
	Title             string         `protobuf:"bytes,14,opt,name=title" json:"title,omitempty"`
	Body              string         `protobuf:"bytes,15,opt,name=body" json:"body,omitempty"`
	Assignee          *User          `protobuf:"bytes,16,opt,name=assignee" json:"assignee,omitempty"`
	Milestone         *Milestone     `protobuf:"bytes,17,opt,name=milestone" json:"milestone,omitempty"`
	Locked            bool           `protobuf:"varint,18,opt,name=locked" json:"locked,omitempty"`
	CreatedAt         string         `protobuf:"bytes,19,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt         string         `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	ClosedAt          string         `protobuf:"bytes,21,opt,name=closed_at,json=closedAt" json:"closed_at,omitempty"`
	MergedAt          string         `protobuf:"bytes,22,opt,name=merged_at,json=mergedAt" json:"merged_at,omitempty"`
	Head              *RepositoryRef `protobuf:"bytes,23,opt,name=head" json:"head,omitempty"`
	Base              *RepositoryRef `protobuf:"bytes,24,opt,name=base" json:"base,omitempty"`
	User              *User          `protobuf:"bytes,25,opt,name=user" json:"user,omitempty"`
	MergeCommitSha    string         `protobuf:"bytes,26,opt,name=merge_commit_sha,json=mergeCommitSha" json:"merge_commit_sha,omitempty"`
	Merged            bool           `protobuf:"varint,27,opt,name=merged" json:"merged,omitempty"`
	Mergeable         bool           `protobuf:"varint,28,opt,name=mergeable" json:"mergeable,omitempty"`
	XLinks            *Links         `protobuf:"bytes,29,opt,name=_links,json=Links" json:"_links,omitempty"`
	MergedBy          *User          `protobuf:"bytes,30,opt,name=merged_by,json=mergedBy" json:"merged_by,omitempty"`
	Comments          int32          `protobuf:"varint,31,opt,name=comments" json:"comments,omitempty"`
	Commits           int32          `protobuf:"varint,32,opt,name=commits" json:"commits,omitempty"`
	Additions         int32          `protobuf:"varint,33,opt,name=additions" json:"additions,omitempty"`
	Deletions         int32          `protobuf:"varint,34,opt,name=deletions" json:"deletions,omitempty"`
	ChangedFiles      int32          `protobuf:"varint,35,opt,name=changed_files,json=changedFiles" json:"changed_files,omitempty"`
}

func (m *PullRequest) Reset()                    { *m = PullRequest{} }
func (m *PullRequest) String() string            { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()               {}
func (*PullRequest) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{3} }

func (m *PullRequest) GetAssignee() *User {
	if m != nil {
		return m.Assignee
	}
	return nil
}

func (m *PullRequest) GetMilestone() *Milestone {
	if m != nil {
		return m.Milestone
	}
	return nil
}

func (m *PullRequest) GetHead() *RepositoryRef {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *PullRequest) GetBase() *RepositoryRef {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *PullRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *PullRequest) GetXLinks() *Links {
	if m != nil {
		return m.XLinks
	}
	return nil
}

func (m *PullRequest) GetMergedBy() *User {
	if m != nil {
		return m.MergedBy
	}
	return nil
}

func init() {
	proto.RegisterType((*RepositoryRef)(nil), "github.RepositoryRef")
	proto.RegisterType((*LinkHref)(nil), "github.LinkHref")
	proto.RegisterType((*Links)(nil), "github.Links")
	proto.RegisterType((*PullRequest)(nil), "github.PullRequest")
}

func init() { proto.RegisterFile("pullrequest.proto", fileDescriptor25) }

var fileDescriptor25 = []byte{
	// 759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x95, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0xc7, 0xd5, 0x36, 0x0f, 0x67, 0xf2, 0x68, 0xb2, 0x7d, 0xb0, 0x4d, 0xdf, 0x29, 0x42, 0x2d,
	0xaa, 0x82, 0x54, 0x0e, 0x88, 0x23, 0x54, 0x42, 0x1c, 0x40, 0x42, 0x46, 0x3d, 0x47, 0x76, 0xbc,
	0x69, 0xac, 0x3a, 0x71, 0xf0, 0xae, 0x41, 0xf9, 0x1c, 0x7c, 0x48, 0x3e, 0x02, 0x57, 0x76, 0x66,
	0x6c, 0x27, 0x81, 0x84, 0xdb, 0xee, 0xff, 0xff, 0x9b, 0x78, 0x76, 0x77, 0x66, 0x02, 0x9d, 0x59,
	0x1a, 0x45, 0x89, 0xfa, 0x96, 0x2a, 0x6d, 0xfa, 0xb3, 0x24, 0x36, 0xb1, 0xa8, 0x3c, 0x86, 0x66,
	0x9c, 0xfa, 0x5d, 0x48, 0xb5, 0x4a, 0x58, 0xeb, 0xb6, 0x13, 0x35, 0x8b, 0x75, 0x68, 0xe2, 0x64,
	0x9e, 0x29, 0xbb, 0x93, 0x30, 0xb2, 0x31, 0xf1, 0x54, 0xb1, 0xd0, 0xfb, 0xb9, 0x05, 0x4d, 0xb7,
	0xa0, 0x5c, 0x35, 0x12, 0xfb, 0x50, 0x8e, 0x3c, 0x5f, 0x45, 0x72, 0xeb, 0x62, 0xeb, 0xba, 0xe6,
	0xf2, 0x46, 0xb4, 0x61, 0x27, 0x51, 0x23, 0xb9, 0x4d, 0x1a, 0x2e, 0x51, 0xd1, 0x63, 0x4f, 0xee,
	0xb0, 0x62, 0x97, 0xe2, 0x02, 0x4a, 0xf8, 0x71, 0x59, 0xb2, 0x52, 0xfd, 0xae, 0xd1, 0xe7, 0x8c,
	0xfa, 0x0f, 0x56, 0x73, 0xc9, 0x11, 0x2f, 0xa0, 0x84, 0x29, 0xc9, 0x32, 0x11, 0x22, 0x27, 0x96,
	0x12, 0x20, 0xbf, 0x77, 0x06, 0xce, 0xa7, 0x70, 0xfa, 0xf4, 0x11, 0xbf, 0x23, 0xa0, 0x34, 0xc6,
	0x4f, 0x73, 0x3a, 0xb4, 0xee, 0xfd, 0xde, 0x86, 0x32, 0x02, 0x5a, 0x3c, 0x87, 0x92, 0x56, 0x11,
	0xbb, 0xf5, 0xbb, 0x76, 0xfe, 0x8b, 0x79, 0xb4, 0x4b, 0x2e, 0x52, 0x63, 0x33, 0x89, 0x28, 0xfd,
	0xb5, 0x14, 0xba, 0x36, 0xbb, 0x72, 0xa8, 0x75, 0xaa, 0xe8, 0x4c, 0xeb, 0x30, 0xb6, 0xc5, 0x2d,
	0x38, 0xc3, 0x78, 0x32, 0x51, 0x53, 0xa3, 0xb3, 0xb3, 0xfe, 0x8b, 0x16, 0x84, 0x78, 0x0b, 0xbb,
	0x89, 0xfa, 0x1e, 0xaa, 0x1f, 0x83, 0x22, 0xa8, 0xbc, 0x21, 0xa8, 0xc5, 0xe0, 0x7d, 0x1e, 0xfa,
	0x06, 0x5a, 0xab, 0xa1, 0xb2, 0xb2, 0x21, 0xb2, 0xb9, 0x12, 0x29, 0x5e, 0x42, 0x15, 0x23, 0x42,
	0xfb, 0xad, 0xea, 0x86, 0x88, 0x1c, 0xc0, 0xd3, 0x68, 0xe3, 0x19, 0xfb, 0x3e, 0x5a, 0x3a, 0x9b,
	0x4e, 0x93, 0x13, 0xbd, 0x5f, 0x0e, 0xd4, 0xbf, 0xd8, 0xe2, 0x73, 0xb9, 0xf8, 0x44, 0x0b, 0xb6,
	0xc3, 0x80, 0x6e, 0xbf, 0xec, 0xda, 0x15, 0x56, 0x45, 0x9a, 0x44, 0x79, 0x9d, 0xd8, 0xa5, 0x38,
	0x02, 0x07, 0x6f, 0x77, 0x80, 0x32, 0x17, 0x4b, 0x15, 0xf7, 0x0f, 0x6c, 0x05, 0xe1, 0x68, 0x44,
	0x56, 0x89, 0x2d, 0xdc, 0xa3, 0x75, 0x0c, 0xb5, 0x99, 0x67, 0x86, 0x63, 0xf2, 0xca, 0xe4, 0x39,
	0x24, 0x64, 0x26, 0xbd, 0x04, 0x99, 0x15, 0x36, 0x49, 0x40, 0xf3, 0x1c, 0xea, 0xd9, 0xd1, 0xc8,
	0xae, 0x92, 0x0d, 0x99, 0x84, 0x40, 0x1f, 0xf6, 0xfe, 0x7a, 0x10, 0x02, 0x1d, 0x02, 0x3b, 0xab,
	0x4f, 0x80, 0xfc, 0x2d, 0x88, 0x55, 0x9e, 0xf0, 0x1a, 0xe1, 0xed, 0x15, 0x1c, 0xe9, 0x4b, 0x68,
	0xac, 0xfc, 0x2c, 0x10, 0x57, 0x1f, 0x2e, 0xfd, 0xa0, 0x45, 0xf2, 0xfb, 0x24, 0xa4, 0xce, 0x48,
	0xae, 0x21, 0x72, 0x08, 0x95, 0x69, 0x3a, 0xf1, 0x6d, 0x33, 0x35, 0xe8, 0x6a, 0xb3, 0x1d, 0x36,
	0x27, 0x62, 0x4a, 0x36, 0xb9, 0x39, 0x69, 0x83, 0xaa, 0x09, 0x4d, 0xa4, 0x64, 0x8b, 0x55, 0xda,
	0x60, 0xe3, 0xf8, 0x71, 0x30, 0x97, 0xbb, 0xdc, 0x38, 0xb8, 0x16, 0xd7, 0xe0, 0x78, 0x5a, 0x87,
	0x8f, 0x53, 0xa5, 0x64, 0x7b, 0x4d, 0x9b, 0x16, 0xae, 0x78, 0x05, 0xb5, 0x62, 0x56, 0xc8, 0x0e,
	0xa1, 0x9d, 0x1c, 0xfd, 0x9c, 0x1b, 0xee, 0x82, 0xc1, 0x94, 0xa3, 0x78, 0xf8, 0xa4, 0x02, 0x29,
	0x2c, 0xed, 0xb8, 0xd9, 0x4e, 0x9c, 0x02, 0x0c, 0x13, 0x65, 0xd3, 0x0c, 0x06, 0x9e, 0x91, 0x7b,
	0x94, 0x4c, 0x2d, 0x53, 0xde, 0x19, 0xb4, 0xd3, 0x59, 0x90, 0xdb, 0xfb, 0x6c, 0x67, 0x8a, 0xb5,
	0xed, 0x53, 0x0f, 0xa3, 0x58, 0xb3, 0x7b, 0xc0, 0x4f, 0xcd, 0x02, 0x9b, 0x13, 0x95, 0x3c, 0xb2,
	0x79, 0xc8, 0x26, 0x0b, 0xd6, 0xbc, 0xb1, 0x3d, 0xaf, 0xbc, 0x40, 0x3e, 0xa3, 0xdc, 0x0f, 0xd6,
	0xcc, 0x1a, 0x6a, 0x7c, 0x8b, 0x20, 0xea, 0x7b, 0x5a, 0x49, 0xf9, 0x5f, 0x14, 0x91, 0x62, 0xc6,
	0x1d, 0x6d, 0x9c, 0x71, 0xd7, 0xd0, 0xa6, 0x1c, 0x06, 0x5c, 0x72, 0x03, 0x1c, 0x92, 0x5d, 0xca,
	0xad, 0x45, 0xfa, 0x3d, 0xc9, 0x5f, 0xed, 0xbc, 0xb4, 0x37, 0xc6, 0xd9, 0xca, 0x63, 0xbe, 0x31,
	0xde, 0x89, 0x93, 0xec, 0x58, 0x9e, 0x6f, 0x9f, 0xf4, 0x84, 0xac, 0x85, 0x60, 0x67, 0x59, 0x65,
	0x10, 0xe1, 0xec, 0x93, 0xa7, 0x94, 0x43, 0x73, 0xb9, 0x5b, 0xb5, 0x9b, 0xcd, 0xc5, 0x9b, 0xe2,
	0x6a, 0xfc, 0xb9, 0x3c, 0x5b, 0xf7, 0xd2, 0x6c, 0xbf, 0x9f, 0x8b, 0xee, 0xd2, 0x38, 0x3b, 0xa7,
	0x6a, 0x5b, 0x0c, 0x2f, 0xb9, 0x18, 0x24, 0x17, 0x64, 0x15, 0x63, 0xc3, 0x26, 0xe9, 0x05, 0x41,
	0x68, 0xc2, 0x78, 0xaa, 0xe5, 0x25, 0x79, 0x0b, 0x01, 0xdd, 0x40, 0x45, 0x8a, 0xdd, 0x1e, 0xbb,
	0x85, 0x20, 0xae, 0xa0, 0x39, 0x1c, 0x7b, 0x53, 0xcc, 0x6e, 0x84, 0xf5, 0x23, 0xaf, 0x88, 0x68,
	0x64, 0xe2, 0x07, 0xd4, 0xfc, 0x0a, 0xfd, 0x41, 0xbd, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x85,
	0x20, 0x2d, 0x6f, 0xec, 0x06, 0x00, 0x00,
}
