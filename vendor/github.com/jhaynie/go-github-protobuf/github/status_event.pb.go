// Code generated by protoc-gen-go.
// source: status_event.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CommitDetailTree struct {
	Sha string `protobuf:"bytes,1,opt,name=sha" json:"sha,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *CommitDetailTree) Reset()                    { *m = CommitDetailTree{} }
func (m *CommitDetailTree) String() string            { return proto.CompactTextString(m) }
func (*CommitDetailTree) ProtoMessage()               {}
func (*CommitDetailTree) Descriptor() ([]byte, []int) { return fileDescriptor31, []int{0} }

type CommitBranch struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Commit *CommitDetailTree `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
}

func (m *CommitBranch) Reset()                    { *m = CommitBranch{} }
func (m *CommitBranch) String() string            { return proto.CompactTextString(m) }
func (*CommitBranch) ProtoMessage()               {}
func (*CommitBranch) Descriptor() ([]byte, []int) { return fileDescriptor31, []int{1} }

func (m *CommitBranch) GetCommit() *CommitDetailTree {
	if m != nil {
		return m.Commit
	}
	return nil
}

type CommitDetail struct {
	Author       *CommitUser       `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	Committer    *CommitUser       `protobuf:"bytes,2,opt,name=committer" json:"committer,omitempty"`
	Message      string            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Tree         *CommitDetailTree `protobuf:"bytes,4,opt,name=tree" json:"tree,omitempty"`
	Url          string            `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	CommentCount int32             `protobuf:"varint,6,opt,name=comment_count,json=commentCount" json:"comment_count,omitempty"`
}

func (m *CommitDetail) Reset()                    { *m = CommitDetail{} }
func (m *CommitDetail) String() string            { return proto.CompactTextString(m) }
func (*CommitDetail) ProtoMessage()               {}
func (*CommitDetail) Descriptor() ([]byte, []int) { return fileDescriptor31, []int{2} }

func (m *CommitDetail) GetAuthor() *CommitUser {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *CommitDetail) GetCommitter() *CommitUser {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *CommitDetail) GetTree() *CommitDetailTree {
	if m != nil {
		return m.Tree
	}
	return nil
}

type CommitUpdate struct {
	Sha         string              `protobuf:"bytes,1,opt,name=sha" json:"sha,omitempty"`
	Commit      *CommitDetail       `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	Url         string              `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	HtmlUrl     string              `protobuf:"bytes,4,opt,name=html_url,json=htmlUrl" json:"html_url,omitempty"`
	CommentsUrl string              `protobuf:"bytes,5,opt,name=comments_url,json=commentsUrl" json:"comments_url,omitempty"`
	Author      *User               `protobuf:"bytes,6,opt,name=author" json:"author,omitempty"`
	Committer   *User               `protobuf:"bytes,7,opt,name=committer" json:"committer,omitempty"`
	Parents     []*CommitDetailTree `protobuf:"bytes,8,rep,name=parents" json:"parents,omitempty"`
}

func (m *CommitUpdate) Reset()                    { *m = CommitUpdate{} }
func (m *CommitUpdate) String() string            { return proto.CompactTextString(m) }
func (*CommitUpdate) ProtoMessage()               {}
func (*CommitUpdate) Descriptor() ([]byte, []int) { return fileDescriptor31, []int{3} }

func (m *CommitUpdate) GetCommit() *CommitDetail {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *CommitUpdate) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *CommitUpdate) GetCommitter() *User {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *CommitUpdate) GetParents() []*CommitDetailTree {
	if m != nil {
		return m.Parents
	}
	return nil
}

type StatusEvent struct {
	Id          int32           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Sha         string          `protobuf:"bytes,2,opt,name=sha" json:"sha,omitempty"`
	Name        string          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	TargetUrl   string          `protobuf:"bytes,4,opt,name=target_url,json=targetUrl" json:"target_url,omitempty"`
	Context     string          `protobuf:"bytes,5,opt,name=context" json:"context,omitempty"`
	Description string          `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	State       string          `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	Commit      *CommitUpdate   `protobuf:"bytes,8,opt,name=commit" json:"commit,omitempty"`
	Branches    []*CommitBranch `protobuf:"bytes,9,rep,name=branches" json:"branches,omitempty"`
	CreatedAt   string          `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt   string          `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Repository  *Repository     `protobuf:"bytes,12,opt,name=repository" json:"repository,omitempty"`
	Sender      *User           `protobuf:"bytes,13,opt,name=sender" json:"sender,omitempty"`
}

func (m *StatusEvent) Reset()                    { *m = StatusEvent{} }
func (m *StatusEvent) String() string            { return proto.CompactTextString(m) }
func (*StatusEvent) ProtoMessage()               {}
func (*StatusEvent) Descriptor() ([]byte, []int) { return fileDescriptor31, []int{4} }

func (m *StatusEvent) GetCommit() *CommitUpdate {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *StatusEvent) GetBranches() []*CommitBranch {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *StatusEvent) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *StatusEvent) GetSender() *User {
	if m != nil {
		return m.Sender
	}
	return nil
}

func init() {
	proto.RegisterType((*CommitDetailTree)(nil), "github.CommitDetailTree")
	proto.RegisterType((*CommitBranch)(nil), "github.CommitBranch")
	proto.RegisterType((*CommitDetail)(nil), "github.CommitDetail")
	proto.RegisterType((*CommitUpdate)(nil), "github.CommitUpdate")
	proto.RegisterType((*StatusEvent)(nil), "github.StatusEvent")
}

func init() { proto.RegisterFile("status_event.proto", fileDescriptor31) }

var fileDescriptor31 = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x56, 0x9b, 0x36, 0x6d, 0x27, 0x5d, 0x54, 0xac, 0x3d, 0x98, 0x95, 0x90, 0x4a, 0xe0, 0x80,
	0x56, 0xab, 0x6a, 0x55, 0x24, 0xee, 0xb0, 0xf0, 0x02, 0x61, 0x7b, 0x8e, 0xdc, 0xc4, 0x6a, 0x22,
	0x35, 0x3f, 0xb2, 0x27, 0x08, 0xde, 0x87, 0x23, 0x6f, 0xc6, 0x4b, 0xe0, 0x9f, 0x38, 0x49, 0xab,
	0x08, 0x6e, 0xf6, 0x37, 0x5f, 0x66, 0xbe, 0xf9, 0x66, 0x1c, 0x20, 0x12, 0x19, 0x36, 0x32, 0xe6,
	0xdf, 0x79, 0x89, 0xbb, 0x5a, 0x54, 0x58, 0x11, 0xff, 0x94, 0x63, 0xd6, 0x1c, 0xef, 0xa0, 0x91,
	0x5c, 0x58, 0xec, 0xee, 0x65, 0x52, 0x15, 0x45, 0x8e, 0xf1, 0x00, 0xda, 0x08, 0x5e, 0x57, 0x32,
	0xc7, 0x4a, 0xfc, 0xb4, 0x48, 0xf8, 0x11, 0x36, 0x4f, 0x86, 0xf6, 0x85, 0x23, 0xcb, 0xcf, 0xcf,
	0x82, 0x73, 0xb2, 0x01, 0x4f, 0x66, 0x8c, 0x4e, 0xb6, 0x93, 0xf7, 0xab, 0x48, 0x1f, 0x35, 0xd2,
	0x88, 0x33, 0x9d, 0x5a, 0x44, 0x1d, 0xc3, 0x67, 0x58, 0xdb, 0xef, 0x3e, 0x0b, 0x56, 0x26, 0x19,
	0x21, 0x30, 0x2b, 0x59, 0xc1, 0xdb, 0x8f, 0xcc, 0x99, 0x3c, 0x82, 0x6f, 0x25, 0x98, 0x0f, 0x83,
	0x3d, 0xdd, 0x59, 0x95, 0xbb, 0xeb, 0x8a, 0x51, 0xcb, 0x0b, 0xff, 0x4c, 0x5c, 0x5a, 0x1b, 0x24,
	0xf7, 0xe0, 0xb3, 0x06, 0xb3, 0x4a, 0x98, 0xc4, 0xc1, 0x9e, 0x5c, 0xa6, 0x38, 0xa8, 0xd6, 0xa2,
	0x96, 0xa1, 0xca, 0xad, 0x6c, 0x1a, 0xe4, 0xa2, 0xad, 0x38, 0x46, 0xef, 0x49, 0x84, 0xc2, 0xa2,
	0xe0, 0x52, 0xb2, 0x13, 0xa7, 0x9e, 0xd1, 0xed, 0xae, 0xe4, 0x01, 0x66, 0xa8, 0x84, 0xd1, 0xd9,
	0x7f, 0x84, 0x1b, 0x96, 0xb3, 0x67, 0xde, 0xd9, 0x43, 0xde, 0xc2, 0x8d, 0x2e, 0xa3, 0x06, 0x14,
	0x27, 0x55, 0x53, 0x22, 0xf5, 0x55, 0x6c, 0x1e, 0xad, 0x5b, 0xf0, 0x49, 0x63, 0xe1, 0xaf, 0xa9,
	0xeb, 0xf6, 0x50, 0xa7, 0x0c, 0xc7, 0x8c, 0x7f, 0xb8, 0xb2, 0xf0, 0x76, 0x4c, 0x89, 0xb3, 0xcf,
	0xe9, 0xf0, 0x7a, 0x1d, 0xaf, 0x60, 0x99, 0x61, 0x71, 0x8e, 0x35, 0x3c, 0xb3, 0x2d, 0xea, 0xfb,
	0x41, 0x85, 0xde, 0x80, 0x53, 0x23, 0xe3, 0x5e, 0x7d, 0xe0, 0x30, 0x4d, 0x79, 0xd7, 0xb9, 0xef,
	0x9b, 0xea, 0x6b, 0x57, 0xfd, 0xc2, 0xf7, 0xfb, 0xa1, 0xef, 0x8b, 0x11, 0xe2, 0xc0, 0xf1, 0x3d,
	0x2c, 0x6a, 0x26, 0x74, 0x7e, 0xba, 0xdc, 0x7a, 0xff, 0xb4, 0xd6, 0x11, 0xc3, 0xdf, 0x1e, 0x04,
	0xdf, 0xcc, 0xca, 0x7f, 0xd5, 0x1b, 0x4f, 0x5e, 0xc0, 0x34, 0x4f, 0x8d, 0x49, 0xf3, 0x48, 0x9d,
	0x9c, 0x6b, 0xd3, 0xde, 0x35, 0xb7, 0x8c, 0xde, 0x60, 0x19, 0x5f, 0x03, 0x20, 0x13, 0x27, 0x8e,
	0x03, 0x2f, 0x56, 0x16, 0xd1, 0xad, 0xaa, 0x55, 0x48, 0xaa, 0x12, 0xf9, 0x0f, 0x6c, 0x8d, 0x70,
	0x57, 0xb2, 0x85, 0x20, 0xe5, 0x32, 0x11, 0x79, 0x8d, 0x79, 0x55, 0x1a, 0x27, 0x94, 0x4d, 0x03,
	0x88, 0xdc, 0xc2, 0x5c, 0x3f, 0x49, 0x6e, 0x9a, 0x5f, 0x45, 0xf6, 0x32, 0x18, 0xdd, 0x72, 0x6c,
	0x74, 0x76, 0xe4, 0xdd, 0xe8, 0x1e, 0x61, 0x79, 0x34, 0x2f, 0x89, 0x4b, 0xba, 0x32, 0xce, 0x5c,
	0xf1, 0xed, 0x3b, 0x8b, 0x3a, 0x96, 0x6e, 0x28, 0x11, 0x5c, 0xe5, 0x48, 0x63, 0x86, 0x14, 0x6c,
	0x43, 0x2d, 0xf2, 0x09, 0x75, 0xb8, 0x31, 0x25, 0x4c, 0x38, 0xb0, 0xe1, 0x16, 0x51, 0xe1, 0x3d,
	0x40, 0xff, 0x2f, 0xa0, 0xeb, 0xcb, 0xd7, 0x12, 0x75, 0x91, 0x68, 0xc0, 0xd2, 0xeb, 0x20, 0x79,
	0x99, 0xaa, 0x29, 0xdf, 0x8c, 0xad, 0x83, 0x8d, 0x1d, 0x7d, 0xf3, 0x63, 0xf9, 0xf0, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x42, 0x1d, 0x73, 0xbf, 0xa7, 0x04, 0x00, 0x00,
}
