// Code generated by protoc-gen-go.
// source: issue_comment_event.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IssueCommentEvent struct {
	Action     string      `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Issue      *Issue      `protobuf:"bytes,2,opt,name=issue" json:"issue,omitempty"`
	Comment    *Comment    `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	Repository *Repository `protobuf:"bytes,4,opt,name=repository" json:"repository,omitempty"`
	Sender     *User       `protobuf:"bytes,5,opt,name=sender" json:"sender,omitempty"`
}

func (m *IssueCommentEvent) Reset()                    { *m = IssueCommentEvent{} }
func (m *IssueCommentEvent) String() string            { return proto.CompactTextString(m) }
func (*IssueCommentEvent) ProtoMessage()               {}
func (*IssueCommentEvent) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *IssueCommentEvent) GetIssue() *Issue {
	if m != nil {
		return m.Issue
	}
	return nil
}

func (m *IssueCommentEvent) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *IssueCommentEvent) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *IssueCommentEvent) GetSender() *User {
	if m != nil {
		return m.Sender
	}
	return nil
}

func init() {
	proto.RegisterType((*IssueCommentEvent)(nil), "github.IssueCommentEvent")
}

func init() { proto.RegisterFile("issue_comment_event.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0x2c, 0x2e, 0x2e,
	0x4d, 0x8d, 0x4f, 0xce, 0xcf, 0xcd, 0x4d, 0xcd, 0x2b, 0x89, 0x4f, 0x2d, 0x03, 0x92, 0x7a, 0x05,
	0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x52, 0x5c, 0xa5, 0xc5,
	0xa9, 0x45, 0x10, 0x31, 0x29, 0x6e, 0xb0, 0x72, 0x28, 0x87, 0x17, 0xaa, 0x0b, 0xca, 0x15, 0x28,
	0x4a, 0x2d, 0xc8, 0x2f, 0xce, 0x2c, 0xc9, 0x2f, 0xaa, 0x84, 0x88, 0x28, 0x5d, 0x65, 0xe4, 0x12,
	0xf4, 0x04, 0x69, 0x70, 0x86, 0x28, 0x74, 0x05, 0x99, 0x2e, 0x24, 0xc6, 0xc5, 0x96, 0x98, 0x5c,
	0x92, 0x99, 0x9f, 0x27, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe5, 0x09, 0x29, 0x73, 0xb1,
	0x82, 0x4d, 0x97, 0x60, 0x02, 0x0a, 0x73, 0x1b, 0xf1, 0xea, 0x41, 0xec, 0xd7, 0x03, 0x9b, 0x10,
	0x04, 0x91, 0x13, 0xd2, 0xe4, 0x62, 0x87, 0xda, 0x2a, 0xc1, 0x0c, 0x56, 0xc6, 0x0f, 0x53, 0x06,
	0xb5, 0x23, 0x08, 0x26, 0x2f, 0x64, 0xc4, 0xc5, 0x85, 0x70, 0x91, 0x04, 0x0b, 0x58, 0xb5, 0x10,
	0x4c, 0x75, 0x10, 0x5c, 0x26, 0x08, 0x49, 0x95, 0x90, 0x0a, 0x17, 0x5b, 0x71, 0x6a, 0x5e, 0x4a,
	0x6a, 0x91, 0x04, 0x2b, 0x58, 0x3d, 0x0f, 0x4c, 0x7d, 0x28, 0x30, 0x0c, 0x82, 0xa0, 0x72, 0x49,
	0x6c, 0x60, 0xef, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x49, 0x2a, 0x47, 0x59, 0x3d, 0x01,
	0x00, 0x00,
}
