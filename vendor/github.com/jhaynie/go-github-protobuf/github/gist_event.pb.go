// Code generated by protoc-gen-go.
// source: gist_event.proto
// DO NOT EDIT!

package github

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GistFile struct {
	Size      int32  `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	RawUrl    string `protobuf:"bytes,2,opt,name=raw_url,json=rawUrl" json:"raw_url,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Language  string `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Truncated bool   `protobuf:"varint,5,opt,name=truncated" json:"truncated,omitempty"`
	Content   string `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
}

func (m *GistFile) Reset()                    { *m = GistFile{} }
func (m *GistFile) String() string            { return proto.CompactTextString(m) }
func (*GistFile) ProtoMessage()               {}
func (*GistFile) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

type GistFork struct {
	User      *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	CreatedAt string `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *GistFork) Reset()                    { *m = GistFork{} }
func (m *GistFork) String() string            { return proto.CompactTextString(m) }
func (*GistFork) ProtoMessage()               {}
func (*GistFork) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *GistFork) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type GistChangeStatus struct {
	Deletions int32 `protobuf:"varint,1,opt,name=deletions" json:"deletions,omitempty"`
	Additions int32 `protobuf:"varint,2,opt,name=additions" json:"additions,omitempty"`
	Total     int32 `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
}

func (m *GistChangeStatus) Reset()                    { *m = GistChangeStatus{} }
func (m *GistChangeStatus) String() string            { return proto.CompactTextString(m) }
func (*GistChangeStatus) ProtoMessage()               {}
func (*GistChangeStatus) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

type GistHistory struct {
	Url          string            `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Version      string            `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	User         *User             `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	ChangeStatus *GistChangeStatus `protobuf:"bytes,4,opt,name=change_status,json=changeStatus" json:"change_status,omitempty"`
	CommittedAt  string            `protobuf:"bytes,5,opt,name=committed_at,json=committedAt" json:"committed_at,omitempty"`
}

func (m *GistHistory) Reset()                    { *m = GistHistory{} }
func (m *GistHistory) String() string            { return proto.CompactTextString(m) }
func (*GistHistory) ProtoMessage()               {}
func (*GistHistory) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *GistHistory) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GistHistory) GetChangeStatus() *GistChangeStatus {
	if m != nil {
		return m.ChangeStatus
	}
	return nil
}

type Gist struct {
	Url         string               `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	ForksUrl    string               `protobuf:"bytes,2,opt,name=forks_url,json=forksUrl" json:"forks_url,omitempty"`
	CommitsUrl  string               `protobuf:"bytes,3,opt,name=commits_url,json=commitsUrl" json:"commits_url,omitempty"`
	Id          int32                `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	Description string               `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Public      bool                 `protobuf:"varint,6,opt,name=public" json:"public,omitempty"`
	Owner       *User                `protobuf:"bytes,7,opt,name=owner" json:"owner,omitempty"`
	User        *User                `protobuf:"bytes,8,opt,name=user" json:"user,omitempty"`
	Files       map[string]*GistFile `protobuf:"bytes,9,rep,name=files" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Truncated   bool                 `protobuf:"varint,10,opt,name=truncated" json:"truncated,omitempty"`
	Comments    int32                `protobuf:"varint,11,opt,name=comments" json:"comments,omitempty"`
	CommentsUrl string               `protobuf:"bytes,12,opt,name=comments_url,json=commentsUrl" json:"comments_url,omitempty"`
	HtmlUrl     string               `protobuf:"bytes,13,opt,name=html_url,json=htmlUrl" json:"html_url,omitempty"`
	GitPullUrl  string               `protobuf:"bytes,14,opt,name=git_pull_url,json=gitPullUrl" json:"git_pull_url,omitempty"`
	GitPushUrl  string               `protobuf:"bytes,15,opt,name=git_push_url,json=gitPushUrl" json:"git_push_url,omitempty"`
	CreatedAt   string               `protobuf:"bytes,16,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt   string               `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Forks       []*GistFork          `protobuf:"bytes,18,rep,name=forks" json:"forks,omitempty"`
}

func (m *Gist) Reset()                    { *m = Gist{} }
func (m *Gist) String() string            { return proto.CompactTextString(m) }
func (*Gist) ProtoMessage()               {}
func (*Gist) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *Gist) GetOwner() *User {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Gist) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Gist) GetFiles() map[string]*GistFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Gist) GetForks() []*GistFork {
	if m != nil {
		return m.Forks
	}
	return nil
}

type GistEvent struct {
	Action string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Gist   *Gist  `protobuf:"bytes,2,opt,name=gist" json:"gist,omitempty"`
}

func (m *GistEvent) Reset()                    { *m = GistEvent{} }
func (m *GistEvent) String() string            { return proto.CompactTextString(m) }
func (*GistEvent) ProtoMessage()               {}
func (*GistEvent) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *GistEvent) GetGist() *Gist {
	if m != nil {
		return m.Gist
	}
	return nil
}

func init() {
	proto.RegisterType((*GistFile)(nil), "github.GistFile")
	proto.RegisterType((*GistFork)(nil), "github.GistFork")
	proto.RegisterType((*GistChangeStatus)(nil), "github.GistChangeStatus")
	proto.RegisterType((*GistHistory)(nil), "github.GistHistory")
	proto.RegisterType((*Gist)(nil), "github.Gist")
	proto.RegisterType((*GistEvent)(nil), "github.GistEvent")
}

func init() { proto.RegisterFile("gist_event.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x95, 0x93, 0x38, 0xb5, 0xc7, 0x6e, 0x7f, 0xf9, 0xad, 0x10, 0x35, 0x05, 0x44, 0xf0, 0x01,
	0x71, 0x21, 0x87, 0x72, 0x41, 0x48, 0x1c, 0x2a, 0x54, 0x40, 0x9c, 0x90, 0x51, 0xcf, 0x91, 0x6b,
	0x6f, 0x13, 0xab, 0x8e, 0x6d, 0xed, 0xae, 0x53, 0x85, 0x2b, 0x57, 0xbe, 0x03, 0x9f, 0x84, 0xef,
	0xc6, 0xcc, 0xae, 0xff, 0x25, 0x6a, 0x39, 0x44, 0xda, 0x79, 0x6f, 0x32, 0x7e, 0xf3, 0x76, 0x66,
	0x61, 0xb6, 0xca, 0xa4, 0x5a, 0xf2, 0x2d, 0x2f, 0xd4, 0xa2, 0x12, 0xa5, 0x2a, 0xd9, 0x74, 0x95,
	0xa9, 0x75, 0x7d, 0x7d, 0x06, 0xb5, 0xe4, 0xc2, 0x60, 0xe1, 0x6f, 0x0b, 0x9c, 0xcf, 0x98, 0xf8,
	0x29, 0xcb, 0x39, 0x63, 0x30, 0x91, 0xd9, 0x0f, 0x1e, 0x58, 0x73, 0xeb, 0xb5, 0x1d, 0xe9, 0x33,
	0x3b, 0x85, 0x23, 0x11, 0xdf, 0x2d, 0x6b, 0x91, 0x07, 0x23, 0x84, 0xdd, 0x68, 0x8a, 0xe1, 0x95,
	0xc8, 0x29, 0x59, 0xed, 0x2a, 0x1e, 0x8c, 0x35, 0xaa, 0xcf, 0xec, 0x0c, 0x9c, 0x3c, 0x2e, 0x56,
	0x75, 0xbc, 0xe2, 0xc1, 0x44, 0xe3, 0x5d, 0xcc, 0x9e, 0x81, 0xab, 0x44, 0x5d, 0x24, 0xb1, 0xe2,
	0x69, 0x60, 0x23, 0xe9, 0x44, 0x3d, 0xc0, 0x02, 0x38, 0x4a, 0xca, 0x42, 0xa1, 0xd8, 0x60, 0xaa,
	0xff, 0xd8, 0x86, 0xe1, 0xaf, 0x56, 0x61, 0x29, 0x6e, 0xd9, 0x1c, 0x26, 0x24, 0x5e, 0x2b, 0xf4,
	0xce, 0xfd, 0x85, 0xe9, 0x68, 0x71, 0x85, 0x58, 0xa4, 0x19, 0x36, 0x83, 0x71, 0xaf, 0x95, 0x8e,
	0xec, 0x04, 0x46, 0x59, 0xda, 0xc8, 0xc4, 0x13, 0x7b, 0x0e, 0x90, 0x08, 0x4e, 0x5f, 0x5d, 0xc6,
	0xaa, 0x91, 0xe9, 0x36, 0xc8, 0x85, 0x22, 0xba, 0xae, 0xd2, 0x96, 0xb6, 0x0d, 0xdd, 0x20, 0x17,
	0x2a, 0x4c, 0x61, 0x46, 0x6a, 0x3e, 0xae, 0xb1, 0x2f, 0xfe, 0x5d, 0xc5, 0xaa, 0x96, 0xd4, 0x5a,
	0xca, 0x73, 0xae, 0xb2, 0xb2, 0x90, 0x8d, 0x79, 0x3d, 0x40, 0x6c, 0x9c, 0xa6, 0x99, 0x61, 0x47,
	0x86, 0xed, 0x00, 0xf6, 0x08, 0x6c, 0x55, 0xaa, 0x38, 0xd7, 0x02, 0xed, 0xc8, 0x04, 0xe1, 0x1f,
	0x0b, 0x3c, 0xfa, 0xcc, 0x17, 0xfc, 0x95, 0x62, 0xd7, 0x76, 0x65, 0xf5, 0x5d, 0xa1, 0x61, 0x5b,
	0x2e, 0x24, 0xd6, 0x68, 0x7a, 0x6d, 0xc3, 0xce, 0xa3, 0xf1, 0x83, 0x1e, 0x7d, 0x80, 0xe3, 0x44,
	0xeb, 0x5f, 0x4a, 0xdd, 0x80, 0x36, 0xc1, 0x3b, 0x0f, 0xda, 0xd4, 0xc3, 0x06, 0x23, 0x3f, 0x19,
	0xb6, 0xfb, 0x12, 0xfc, 0xa4, 0xdc, 0x6c, 0x32, 0xb5, 0xe7, 0x91, 0xd7, 0x61, 0xe8, 0xd2, 0x4f,
	0x1b, 0x26, 0x54, 0xe5, 0x1e, 0xe1, 0x4f, 0xc1, 0xbd, 0xc1, 0xab, 0x94, 0x83, 0x91, 0x72, 0x34,
	0x40, 0x43, 0xf5, 0x02, 0x9a, 0x32, 0x86, 0x36, 0x97, 0x06, 0x0d, 0x74, 0xd5, 0x5d, 0xe6, 0x44,
	0x7b, 0x45, 0x97, 0x39, 0x07, 0x2f, 0xe5, 0x32, 0x11, 0x59, 0x45, 0x76, 0xb6, 0x52, 0x06, 0x10,
	0x7b, 0x0c, 0xd3, 0xaa, 0xbe, 0xce, 0xb3, 0x44, 0x0f, 0x96, 0x13, 0x35, 0x11, 0x0b, 0xc1, 0x2e,
	0xef, 0x0a, 0xf4, 0xe9, 0xe8, 0x1e, 0x9f, 0x0c, 0xd5, 0x59, 0xe9, 0x3c, 0x68, 0xe5, 0x1b, 0xb0,
	0x6f, 0x70, 0x75, 0x64, 0xe0, 0xce, 0xc7, 0x98, 0x72, 0x3a, 0xb4, 0x70, 0x41, 0x4b, 0x25, 0x2f,
	0x0b, 0x25, 0x76, 0x91, 0xc9, 0xda, 0x5f, 0x02, 0x38, 0x5c, 0x02, 0x5c, 0x1f, 0x6a, 0x15, 0xa7,
	0x5e, 0x06, 0x9e, 0x6e, 0xb1, 0x8b, 0x5b, 0xd3, 0xe9, 0xac, 0xad, 0xf1, 0x7b, 0xd3, 0x09, 0x23,
	0x6f, 0x9e, 0x80, 0xb3, 0x56, 0x9b, 0x5c, 0xd3, 0xc7, 0x66, 0x26, 0x28, 0x26, 0x6a, 0x0e, 0x3e,
	0x0a, 0x5b, 0x56, 0x75, 0x6e, 0xe8, 0x13, 0x63, 0x2c, 0x62, 0xdf, 0x10, 0xda, 0xcb, 0x90, 0x6b,
	0x9d, 0xf1, 0xdf, 0x20, 0x43, 0xae, 0x29, 0x63, 0x7f, 0x6f, 0x66, 0xff, 0xde, 0x9b, 0xff, 0x0f,
	0xf6, 0x86, 0xbd, 0x42, 0xa3, 0xe8, 0x96, 0x03, 0xa6, 0x8d, 0x9a, 0x0d, 0x8d, 0xa2, 0xd5, 0x8e,
	0x0c, 0x7d, 0xf6, 0x15, 0xa0, 0xb7, 0x8d, 0xc6, 0xe7, 0x96, 0xef, 0xda, 0xf1, 0xc1, 0x23, 0xd5,
	0xd9, 0xc6, 0x79, 0xcd, 0xf5, 0xe8, 0x1c, 0xd6, 0xc1, 0x3f, 0x46, 0x86, 0x7e, 0x3f, 0x7a, 0x67,
	0x85, 0x97, 0xe0, 0x12, 0x7c, 0x49, 0x6f, 0x20, 0xcd, 0x41, 0x9c, 0xe8, 0x21, 0x31, 0xd5, 0x9a,
	0x88, 0xee, 0x98, 0x5e, 0xca, 0xa6, 0x9e, 0x3f, 0xac, 0x17, 0x69, 0xe6, 0x7a, 0xaa, 0x9f, 0xca,
	0xb7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x56, 0x0d, 0xba, 0x74, 0x52, 0x05, 0x00, 0x00,
}
